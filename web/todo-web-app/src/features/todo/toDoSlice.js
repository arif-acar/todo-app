import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  deleteById,
  fetchAllTodos,
  postComplete,
  postCreate,
  postUncomplete,
} from "./toDoApi";

const initialState = {
  todoList: [],
  status: "idle",
};

export const getAllTodos = createAsyncThunk("todo/fetchList", async () => {
  const response = await fetchAllTodos();
  return response.data;
});

export const updateTodo = createAsyncThunk(
  "todo/updateTodo",
  async ({ id, completionStatus }) => {
    let response;

    console.log(id, completionStatus);
    if (completionStatus === "complete") response = await postComplete(id);
    else {
      response = await postUncomplete(id);
    }
    return response.data;
  }
);

export const deleteTodo = createAsyncThunk("todo/deleteTodo", async (id) => {
  await deleteById(id);

  return id;
});

export const createTodo = createAsyncThunk("todo/createTodo", async (name) => {
  const response = await postCreate(name);

  return response.data;
});

export const toDoSlice = createSlice({
  name: "todo",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllTodos.pending, (state) => {
        state.status = "loading";
      })
      .addCase(getAllTodos.fulfilled, (state, action) => {
        state.status = "idle";
        state.todoList = action.payload;
      })
      .addCase(updateTodo.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateTodo.fulfilled, (state, action) => {
        state.status = "idle";
        state.todoList = state.todoList.map((item) =>
          item?.id === action.payload?.id ? action.payload : item
        );
      })
      .addCase(deleteTodo.pending, (state) => {
        state.status = "loading";
      })
      .addCase(deleteTodo.fulfilled, (state, action) => {
        state.status = "idle";
        state.todoList = state.todoList.filter(
          (item) => item?.id !== action.payload
        );
      })
      .addCase(createTodo.pending, (state) => {
        state.status = "loading";
      })
      .addCase(createTodo.fulfilled, (state, action) => {
        state.status = "idle";
        state.todoList = [...state.todoList, action.payload];
      });
  },
});

export const selectTodoList = (state) => state.todo.todoList;

export default toDoSlice.reducer;
